//******************************************************************************
//
// Copyright (C) SAAB AB
//
// All rights, including the copyright, to the computer program(s) 
// herein belong to Saab AB. The program(s) may be used and/or
// copied only with the written permission of Saab AB, or in
// accordance with the terms and conditions stipulated in the
// agreement/contract under which the program(s) have been
// supplied. 
//
//
// Information Class:	COMPANY UNCLASSIFIED
// Defence Secrecy:		NOT CLASSIFIED
// Export Control:		NOT EXPORT CONTROLLED
//
//
// File			: DynamicTerrainCompute.compute
// Module		:
// Description	: Shader Code
// Author		: ALBNI
// Product		: BTA
//
//
// Revision History...
//
// Who	Date	Description
//
// Links:
// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
//
//******************************************************************************

// Kernels
#pragma kernel MeshGrassGenerator
#pragma kernel MeshTreeGenerator
#pragma kernel PointCloudPlacement
#pragma kernel CrossBoardPlacement
#pragma kernel IndirectGrass
#pragma kernel Cull
#pragma kernel TreeCull
#pragma kernel FindQuad
#pragma kernel Resize

// Minimum / maximum integer values
#define intMin -2147483648
#define intMax 2147483647
#define SUBS 16
#define plasticConstant 1.32471795724474602596

// Buffers
StructuredBuffer<float3> surfaceVertices;
StructuredBuffer<int> surfaceIndices;
StructuredBuffer<float2> surfaceUVs;

// Calculated points
AppendStructuredBuffer<float4> terrainPoints;

// copy
StructuredBuffer<float4> BigBuffer;
AppendStructuredBuffer<float4> SmallBuffer;
uint CopyCount;

// culling
StructuredBuffer<float4> Input;
AppendStructuredBuffer<float4> Output;
AppendStructuredBuffer<float4> closeBuffer;

// Geometry
AppendStructuredBuffer<float4> SmallestQuad;

// Indirect buffer
RWStructuredBuffer<int> indirectBuffer;

// Textures
Texture2D<float4> splatMap;                     // Grass splatMap
Texture2D<unorm float> PlacementMap;                 // placementMap
Texture2D<float4> NodeTexture;                  // Map tile texture
Texture2D<float4> BillboardPlane;               // Billboard

// Variables
bool PlacementMapEnabled;
float surfaceGridStep;
float surfaceSize;
uint cullCount;
uint indexCount;
uint BillboardPlaneResolution;

float4 frustumPlanes[6];						// Frustum planes (6 planes * 4 floats: [ normal.x, normal.y, normal.z, distance ])
float3 terrainOffset;                           // Terrain offset in meters
float3 CameraPosition;
float4x4 ObjToWorld;
int terrainResolution;                          // Resolution of texture

// Terrain frustum culling
inline bool IsInFrustum(float3 positionAfterProjection, float treshold = 1)
{
	float cullValue = treshold;

	return (dot(frustumPlanes[0].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[1].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[2].xyz, positionAfterProjection) >= cullValue &&
		dot(frustumPlanes[3].xyz, positionAfterProjection) >= cullValue) &&
		(frustumPlanes[5].w >= abs(distance(CameraPosition, positionAfterProjection)));
}

// ************* Get Grass Type *************

int GetFeatureType(uint i, uint valid[8])
{
	uint Types[] = { 0,0,0,0,0,0,0,0 };
	int index = 0;

	for (int x = 0; x < 8; x++)
	{
		if (valid[x] == 1)
		{
			Types[index] = x;
			index++;
		}
	}
	if (index == 0)
	{
		return -1;
	}

	return Types[i % index];
}

int GetType(uint color, uint i)
{
	uint Types[] = { 0,0,0,0,0,0,0,0 };

	Types[0] = (color >> 0) & 1;
	Types[1] = (color >> 1) & 1;
	Types[2] = (color >> 2) & 1;
	Types[3] = (color >> 3) & 1;
	Types[4] = (color >> 4) & 1;
	Types[5] = (color >> 5) & 1;
	Types[6] = (color >> 6) & 1;
	Types[7] = (color >> 7) & 1;

	int valid = GetFeatureType(i, Types);
	return valid;
}

// ************* HSV *************
float3 RGBToHSV(float3 RGB)
{
	float R = (RGB.x >= 1.0 ? 255 : RGB.x * 256.0);
	float G = (RGB.y >= 1.0 ? 255 : RGB.y * 256.0);
	float B = (RGB.z >= 1.0 ? 255 : RGB.z * 256.0);

	float h = 0, s;

	float v = max(max(R, G), B);
	float Cmin = min(min(R, G), B);

	float delta = v - Cmin;

	if (v == 0.0) { s = 0; }
	else { s = delta / v; }

	if (s == 0) { h = 0.0; }
	else
	{
		if (R == v)
		{
			h = (G - B) / delta;
		}
		else if (G == v)
		{
			h = 2 + (B - R) / delta;
		}
		else if (B == v)
		{
			h = 4 + (R - G) / delta;
		}

		h *= 60;
		if (h < 0.0) { h = h + 360; }
	}

	return float3(h, s, (v / 255));
}

bool InRange(float3 value, float3 v1, float3 v2)
{
	if (value.x >= min(v1.x, v2.x) && value.x <= max(v1.x, v2.x))
	{
		//return true;
		if (value.y >= min(v1.y, v2.y) && value.y <= max(v1.y, v2.y))
		{
			if (value.z >= min(v1.z, v2.z) && value.z <= max(v1.z, v2.z))
			{
				return true;
			}
		}
	}
	return false;
}

// ************* Mesh Grass *************
[numthreads(16, SUBS, 1)]
// can calculate a maximum of (65535 * 8) 524,280 triangles parallel
void MeshGrassGenerator(int3 id : SV_DispatchThreadID)
{
	float density = surfaceGridStep;
	uint index = id.x * 3;
	uint sub = id.y;

	if (index >= indexCount) { return; }

	float3 v1 = surfaceVertices[surfaceIndices[index]];
	float3 v2 = surfaceVertices[surfaceIndices[index + 1]];
	float3 v3 = surfaceVertices[surfaceIndices[index + 2]];

	float2 uv1 = surfaceUVs[surfaceIndices[index]];
	float2 uv2 = surfaceUVs[surfaceIndices[index + 1]];
	float2 uv3 = surfaceUVs[surfaceIndices[index + 2]];

	// Area
	float area = length(cross((v2 - v1), (v3 - v1))) / 2;
	if (area < density) { return; }
	float grassAmount = area / density;

	int start = sub * ceil(grassAmount / SUBS);
	int end = (sub + 1) * ceil(grassAmount / SUBS);
	end = min(end, grassAmount);

	if (grassAmount <= SUBS)
	{
		if (sub != 0)
		{
			return;
		}
		start = 0;
		end = grassAmount;
	}

	// ************* Barycentric coordinate *************
	for (int i = start; i < end; i += 1.0f)
	{
		float a1 = 1 / (plasticConstant);
		float a2 = 1 / ((plasticConstant) * (plasticConstant));

		float r1 = frac(0.5 + a1 * i);
		float r2 = frac(0.5 + a2 * i);

		float2 uv = (1 - sqrt(r1)) * uv1 + (sqrt(r1) * (1 - r2)) * uv2 + (sqrt(r1) * r2) * uv3;
		float3 finalPoint = (1 - sqrt(r1)) * v1 + (sqrt(r1) * (1 - r2)) * v2 + (sqrt(r1) * r2) * v3;

		float4 color = splatMap[uv * terrainResolution];
		float4 nodeColor = NodeTexture[uv * terrainResolution];
		//float3 placement = PlacementMap[uv * terrainResolution];
		unorm float placement = PlacementMap[uv * terrainResolution];

		//uint value = (uint)(placement.x * 255) | (uint)(placement.y * 255) << 8 | (uint)(placement.z * 255) << 16;
		uint blueColor = (color.z >= 1.0 ? 255 : color.z * 256.0);

		int valid = GetType(blueColor, i);
		if (valid != -1)
		{
			float3 HSV = RGBToHSV(nodeColor.xyz);
			bool Append = PlacementMapEnabled;

			if (PlacementMapEnabled)
			{
				uint feauture = uint(placement >= 1.0 ? 255 : placement * 256.0);
				//uint green = uint(placement.y >= 1.0 ? 255 : placement.y * 256.0);
				Append = feauture == 21 || feauture == 40;
			}
			else
			{
				Append = InRange(HSV, float3(22, 0.2, 0), float3(170, 1, 1));
			}

			// TODO: only until we generate a proper splatmap
			//if (InRange(HSV, float3(22, 0.2, 0), float3(170, 1, 1)))
			// if ((value >> 0) & 1 || (value >> 1) & 1)
			if (Append)
			{
				terrainPoints.Append(float4(finalPoint.xyz, valid));
			}
		}
	}
}
// ************* Mesh Tree *************
[numthreads(16, SUBS, 1)]
// can calculate a maximum of (65535 * 8) 524,280 triangles parallel
void MeshTreeGenerator(int3 id : SV_DispatchThreadID)
{
	float density = surfaceGridStep;
	uint index = (id.x * 3);
	uint sub = id.y;
	if (index >= indexCount) { return; }

	float3 v1 = surfaceVertices[surfaceIndices[index]];
	float3 v2 = surfaceVertices[surfaceIndices[index + 1]];
	float3 v3 = surfaceVertices[surfaceIndices[index + 2]];

	float2 uv1 = surfaceUVs[surfaceIndices[index]];
	float2 uv2 = surfaceUVs[surfaceIndices[index + 1]];
	float2 uv3 = surfaceUVs[surfaceIndices[index + 2]];
	// Area

	float area = length(cross((v2 - v1), (v3 - v1))) / 2;
	//if (area < density) { return; }
	float TreeAmount = ceil(area / density);

	uint start = sub * ceil(TreeAmount / SUBS);
	uint end = (sub + 1) * ceil(TreeAmount / SUBS);
	end = min(end, TreeAmount);

	if (TreeAmount <= SUBS)
	{
		if (sub != 0)
		{
			return;
		}
		start = 0;
		end = TreeAmount;
	}

	// ************* Barycentric coordinate *************
	for (uint i = start; i < end; i++)
	{
		float a1 = 1 / (plasticConstant);
		float a2 = 1 / ((plasticConstant) * (plasticConstant));

		float r1 = frac(0.5 + a1 * i);
		float r2 = frac(0.5 + a2 * i);

		float2 uv = (1 - sqrt(r1)) * uv1 + (sqrt(r1) * (1 - r2)) * uv2 + (sqrt(r1) * r2) * uv3;
		float3 finalPoint = (1 - sqrt(r1)) * v1 + (sqrt(r1) * (1 - r2)) * v2 + (sqrt(r1) * r2) * v3;

		float4 color = splatMap[uv * terrainResolution];
		float4 nodeColor = NodeTexture[uv * terrainResolution];
		//float3 placement = PlacementMap[uv * terrainResolution];
		unorm float placement = PlacementMap[uv * terrainResolution];

		uint blueColor = (color.z >= 1.0 ? 255 : color.z * 256.0);

		int valid = GetType(blueColor, i);

		float3 HSV = RGBToHSV(nodeColor.xyz);

		//uint value = (uint)(placement.x * 255) | (uint)(placement.y * 255) << 8 | (uint)(placement.z * 255) << 16;
		bool Append = PlacementMapEnabled;

		if (PlacementMapEnabled)
		{
			//uint green = uint(placement.y >= 1.0 ? 255 : placement.y * 256.0);
			//Append = green == 40;
			Append = uint(placement >= 1.0 ? 255 : placement * 256.0) == 40;
		}
		else
		{
			Append = InRange(HSV, float3(80, 0.2, 0), float3(140, 1, 1));
		}

		if (Append)
		{
			terrainPoints.Append(float4(finalPoint.xyz, valid));
		}

	}
}

// ************* Point Cloud Placement ************
[numthreads(16, 1, 1)]
void PointCloudPlacement(int3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= indexCount) { return; }

	float3 p = surfaceVertices[index];
	float2 uv = surfaceUVs[index];

	float4 color = splatMap[uv * terrainResolution];
	//float3 placement = PlacementMap[uv * terrainResolution];
	unorm float placement = PlacementMap[uv * terrainResolution];

	uint blueColor = (color.z >= 1.0 ? 255 : color.z * 256.0);
	int valid = GetType(blueColor, id.x);

	float4 nodeColor = NodeTexture[uv * terrainResolution];
	float3 HSV = RGBToHSV(nodeColor.xyz);

	//uint value = (uint)(placement.x * 255) | (uint)(placement.y * 255) << 8 | (uint)(placement.z * 255) << 16;
	bool Append = PlacementMapEnabled;

	if (PlacementMapEnabled)
	{
		//uint green = uint(placement.y >= 1.0 ? 255 : placement.y * 256.0);
		//Append = green == 40;
		Append = uint(placement >= 1.0 ? 255 : placement * 256.0) == 40;
	}
	else
	{
		Append = InRange(HSV, float3(80, 0.2, 0), float3(140, 1, 1));
	}

	if (Append)
	{
		if (id.x % 3 == 1)
			terrainPoints.Append(float4(p.xyz, valid));
	}
}

// ************* Point Cloud Placement ************

[numthreads(16, 1, 1)]
void CrossBoardPlacement(int3 id : SV_DispatchThreadID)
{
	uint index = id.x;
	if (index >= indexCount) { return; }

	float3 p = surfaceVertices[index];

	terrainPoints.Append(float4(p.xyz, id.x % 2));
}

// ************* Cull shader *************
// can cull a maximum of (65535 * 128) 8,388,480 grass strains parallel
[numthreads(128, 1, 1)]
void Cull(uint3 id : SV_DispatchThreadID)
{
	int index = id.x;
	if (index >= indirectBuffer[0]) { return; }

	float4 data = Input[index];
	float4 pos = mul(ObjToWorld, float4(data.xyz, 1));

	if (IsInFrustum(pos.xyz - CameraPosition, -5))
	{
		/*float dist = length(pos);
		int t = index % frustumPlanes[5].w;

		if (t < dist)
		{
			return;
		}*/
		Output.Append(float4(pos.xyz, data.w));
	}
}

// ************* Cull shader *************
// can cull a maximum of (65535 * 128) 8,388,480 grass strains parallel
[numthreads(128, 1, 1)]
void TreeCull(uint3 id : SV_DispatchThreadID)
{
	int index = id.x;
	if (index >= indirectBuffer[0]) { return; }

	float4 data = Input[index];

	float4 pos = mul(ObjToWorld, float4(data.xyz, 1));

	if (IsInFrustum(pos.xyz - CameraPosition, -15))
	{
		//Output.Append(float4(pos.xyz, data.w));
		//if (length(pos) > 150)
		{
			Output.Append(float4(pos.xyz, data.w));
		}
		//if (length(pos) < 100)
		{
			closeBuffer.Append(float4(pos.xyz, data.w));
		}
	}
}

[numthreads(1, 1, 1)]
void FindQuad(uint3 id : SV_DispatchThreadID)
{
	half cutoff = 0.9f;
	int size = BillboardPlaneResolution;

	int _maxX = 0;
	int _maxY = 0;
	int _minX = size;
	int _minY = size;

	for (int x = 0; x < size; x++)
	{
		for (int y = 0; y < size; y++)
		{
			half2 uv = half2(x, y);
			half4 color = BillboardPlane[uv];

			if (color.w > cutoff)
			{
				_maxX = max(x, _maxX);
				_maxY = max(y, _maxY);

				_minX = min(x, _minX);
				_minY = min(y, _minY);
			}
		}
	}
	SmallestQuad.Append(float4(_minX, _maxX, _minY, _maxY));
}

// ************* Resize *************
// Resize buffer to smaller version
[numthreads(64, 1, 1)]
void Resize(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= CopyCount)
		return;

	float4 p = BigBuffer[id.x];
	SmallBuffer.Append(p);
}

// ************* Indirect *************
// may be used in the future for a performance increase
[numthreads(1, 1, 1)]
void IndirectGrass()
{
	indirectBuffer[0] = ceil(indirectBuffer[0] / 128.0); // mesh has 64000 vertices
}