//******************************************************************************
//
// Copyright (C) SAAB AB
//
// All rights, including the copyright, to the computer program(s) 
// herein belong to Saab AB. The program(s) may be used and/or
// copied only with the written permission of Saab AB, or in
// accordance with the terms and conditions stipulated in the
// agreement/contract under which the program(s) have been
// supplied. 
//
//
// Information Class:	COMPANY UNCLASSIFIED
// Defence Secrecy:		NOT CLASSIFIED
// Export Control:		NOT EXPORT CONTROLLED
//
//
// File			: CullShader.compute
// Module		:
// Description	: Shader Code
// Author		: ALBNI
// Product		: BTA
//
//
// Revision History...
//
// Who	Date	Description
//
//
//******************************************************************************

// ************************** NOTE *********************************************
//
//      Stand alone from BTA !!! No BTA code in this !!!
//
// *****************************************************************************

#pragma kernel CS_Cull

// instance data for a crossboard tree
struct InstanceData
{
	// local position
	float3 Point;

	// size of the tree
	float Size;

	// rotation of the tree (heading, pitch, roll)
	float3 Rotation;

	// color of the tree
	float3 Color;

	// Origion.y offset
	float Offset;

	// Plane Offset
	float3 PlaneOffset;
};

StructuredBuffer<InstanceData> Input;
AppendStructuredBuffer<InstanceData> Output;

uint _count;


float3 _CameraPos;
float4x3 _CameraFrustumNormals;
float4x4 _ToWorld;

[numthreads(64,1,1)]
void CS_Cull (uint3 _dispatchThreadID : SV_DispatchThreadID)
{
	uint tID = _dispatchThreadID.x;
	if (tID >= _count)
		return;

	// CheckCulling!

	InstanceData data = Input[tID];

	
	// transform position from object space to world space
	float3 world = mul(_ToWorld, float4(data.Point, 1)).xyz;

	float3 posFromCamera = _CameraPos - world;
	
	//DistanceToPlane(_CameraFrustumNormals[0])
	float cullValue = data.Size;
	
	if (dot(_CameraFrustumNormals[0], posFromCamera) <= cullValue &&
		dot(_CameraFrustumNormals[1], posFromCamera) <= cullValue &&
		dot(_CameraFrustumNormals[2], posFromCamera) <= cullValue &&
		dot(_CameraFrustumNormals[3], posFromCamera) <= cullValue)
	{
		//data.Point = world;
		Output.Append(data);
	}
}



// Frustum cullling on a sphere. Returns > 0 if visible, <= 0 otherwise
//float CullSphere(vec4 vPlanes[6], vec3 vCenter, float fRadius)
//{
	//float dist01 = min(DistanceToPlane(vPlanes[0], vCenter), DistanceToPlane(vPlanes[1], vCenter));
	//float dist23 = min(DistanceToPlane(vPlanes[2], vCenter), DistanceToPlane(vPlanes[3], vCenter));
	//float dist45 = min(DistanceToPlane(vPlanes[4], vCenter), DistanceToPlane(vPlanes[5], vCenter));

	//return min(min(dist01, dist23), dist45) + fRadius;
//}
